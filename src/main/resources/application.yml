spring:
    application:
        name: kyobokngbook
    profiles:
        active: dev
    datasource:
        url: jdbc:mysql://localhost:3306/dev2
        username: root
        password: 1q2w3e4r
    jpa:
        hibernate:
            ddl-auto: update # 데이터베이스 스키마 자동 생성 또는 업데이트
            naming:
                physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy # 카멜케이스 치환
        show-sql: true # 쿼리문 확인 가능
    flyway:
        enabled: true
        baseline-on-migrate: true          #  flyway_schema_history 테이블을 자동으로 생성할지 여부 적용하지 않은  DB 만
#        url: jdbc:mysql://localhost:3306/dev
#        user: root
#        password: 1q2w3e4r
#        baseline-version: 0                # 최초 버전 정보
#        baseline-on-migrate: true #최초 마이그레이션시 특정 버전 기준 베이스라인 설정
#        validate-on-migrate: true
#        baseline-on-migrate
#
#        default 값은 false 이다. true일 경우 flyway_schema_history 테이블이 없는 경우 생성해준다.
#        false는 해당 테이블이 기존에 생성되 있어야 한다.
#
#        baseline-version
#
#        default 값은 1이다. 밑에서 언급할 version의 시작 기준 값을 나타낸다.

#    V1__init.sql 에는 테이블 생성 쿼리가, V2... .sql 에는 컬럼 이름 변경에 대한 쿼리가 적혀져 있는 상황이다.
#
#    resources/db/migration/prod 디렉터리 내부에 sql 파일을 작성한다.
#    파일 이름 형식은 V{버전 숫자}__{name}.sql 이다. 언더바는 반드시 2개가 들어가야한다.
#    위의 설정에서 baseline-version 을 0으로 두어야 V1 부터 읽는다.
#
#    DB 내의 flyway_schema_history 에 적힌 버전을 보고 반영될 버전 오름차순으로 차례대로 적용해준다.
#
#
#    DB 별로 스크립트가 다를 수 있으니 syntax error에 유의해야 한다.
#    spring.jpa.hibernate.ddl-auto 는 validate 으로 두자.


#    spring.datasource.url=jdbc:mysql://localhost:3306/your_database_name?createDatabaseIfNotExist=true
#    spring.datasource.username=your_username
#    spring.datasource.password=your_password  
#
#    spring.jpa.hibernate.ddl-auto=update
#create: 매번 애플리케이션 실행 시 데이터베이스를 새로 생성
#create-drop: 애플리케이션 종료 시 데이터베이스를 삭제
#update: 데이터베이스 스키마를 엔티티에 맞춰 자동으로 변경 (개발 환경에서 주로 사용)
#validate: 데이터베이스 스키마가 엔티티와 일치하는지 검증
# JPA의 구현체인 Hibernate가 동작하면서 발생한 SQL의 가독성을 높여줌
#    spring.jpa.properties.hibernate.format_sql=true
#create  :  기존 테이블을 삭제하고 새로 생성 [ DROP + CREATE ]
#create-drop  :  CREATE 속성에 추가로 어플리케이션을 종료할 때 생성한 DDL을 제거  [ DROP + CREATE + DROP ]
#update  :  DB 테이블과 엔티티 매핑 정보를 비교해서 변경 사항만 수정 [ 테이블이 없을 경우 CREATE ]
#validate  :  DB 테이블과 엔티티 매핑정보를 비교해서 차이가 있으면 경고를 남기고 어플리케이션을 실행하지 않음
#none  :  자동 생성 기능을 사용하지 않음
---
server:
    port: 8080
